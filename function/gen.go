// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2023-07-10 12:39:43.3709934 +0200 CEST m=+0.009192101
package function

// Pipe1 takes an initial value t0 and sucessively applies 1 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe1[T0, T1 any](t0 T0, f1 func(T0) T1) T1 {
  t1 := f1(t0)
  return t1
}

// Flow1 creates a function that takes an initial value t0 and sucessively applies 1 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow1[T0, T1 any](f1 func(T0) T1) func(T0) T1 {
  return func(t0 T0) T1 {
    return Pipe1(t0, f1)
  }
}

// Nullary1 creates a parameter less function from a parameter less function and 0 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary1[T1 any](f1 func() T1) func() T1 {
  return func() T1 {
    return Pipe0(f1())
  }
}

// Curry1 takes a function with 1 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry1]
func Curry1[T0, T1 any](f func(T0) T1) func(T0) T1 {
  return func(t0 T0) T1 {
    return f(t0)
  }
}

// Uncurry1 takes a cascade of 1 functions each taking only one parameter and returns a function with 1 parameters .
// The inverse function is [Curry1]
func Uncurry1[T0, T1 any](f func(T0) T1) func(T0) T1 {
  return func(t0 T0) T1 {
    return f(t0)
  }
}

// Pipe2 takes an initial value t0 and sucessively applies 2 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe2[T0, T1, T2 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2) T2 {
  t1 := f1(t0)
  t2 := f2(t1)
  return t2
}

// Flow2 creates a function that takes an initial value t0 and sucessively applies 2 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow2[T0, T1, T2 any](f1 func(T0) T1, f2 func(T1) T2) func(T0) T2 {
  return func(t0 T0) T2 {
    return Pipe2(t0, f1, f2)
  }
}

// Nullary2 creates a parameter less function from a parameter less function and 1 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary2[T1, T2 any](f1 func() T1, f2 func(T1) T2) func() T2 {
  return func() T2 {
    return Pipe1(f1(), f2)
  }
}

// Curry2 takes a function with 2 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry2]
func Curry2[T0, T1, T2 any](f func(T0, T1) T2) func(T0) func(T1) T2 {
  return func(t0 T0) func(t1 T1) T2 {
    return func(t1 T1) T2 {
      return f(t0, t1)
    }
  }
}

// Uncurry2 takes a cascade of 2 functions each taking only one parameter and returns a function with 2 parameters .
// The inverse function is [Curry2]
func Uncurry2[T0, T1, T2 any](f func(T0) func(T1) T2) func(T0, T1) T2 {
  return func(t0 T0, t1 T1) T2 {
    return f(t0)(t1)
  }
}

// Pipe3 takes an initial value t0 and sucessively applies 3 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe3[T0, T1, T2, T3 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3) T3 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  return t3
}

// Flow3 creates a function that takes an initial value t0 and sucessively applies 3 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow3[T0, T1, T2, T3 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3) func(T0) T3 {
  return func(t0 T0) T3 {
    return Pipe3(t0, f1, f2, f3)
  }
}

// Nullary3 creates a parameter less function from a parameter less function and 2 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary3[T1, T2, T3 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3) func() T3 {
  return func() T3 {
    return Pipe2(f1(), f2, f3)
  }
}

// Curry3 takes a function with 3 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry3]
func Curry3[T0, T1, T2, T3 any](f func(T0, T1, T2) T3) func(T0) func(T1) func(T2) T3 {
  return func(t0 T0) func(t1 T1) func(t2 T2) T3 {
    return func(t1 T1) func(t2 T2) T3 {
      return func(t2 T2) T3 {
        return f(t0, t1, t2)
      }
    }
  }
}

// Uncurry3 takes a cascade of 3 functions each taking only one parameter and returns a function with 3 parameters .
// The inverse function is [Curry3]
func Uncurry3[T0, T1, T2, T3 any](f func(T0) func(T1) func(T2) T3) func(T0, T1, T2) T3 {
  return func(t0 T0, t1 T1, t2 T2) T3 {
    return f(t0)(t1)(t2)
  }
}

// Pipe4 takes an initial value t0 and sucessively applies 4 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe4[T0, T1, T2, T3, T4 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4) T4 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  return t4
}

// Flow4 creates a function that takes an initial value t0 and sucessively applies 4 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow4[T0, T1, T2, T3, T4 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4) func(T0) T4 {
  return func(t0 T0) T4 {
    return Pipe4(t0, f1, f2, f3, f4)
  }
}

// Nullary4 creates a parameter less function from a parameter less function and 3 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary4[T1, T2, T3, T4 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4) func() T4 {
  return func() T4 {
    return Pipe3(f1(), f2, f3, f4)
  }
}

// Curry4 takes a function with 4 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry4]
func Curry4[T0, T1, T2, T3, T4 any](f func(T0, T1, T2, T3) T4) func(T0) func(T1) func(T2) func(T3) T4 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) T4 {
    return func(t1 T1) func(t2 T2) func(t3 T3) T4 {
      return func(t2 T2) func(t3 T3) T4 {
        return func(t3 T3) T4 {
          return f(t0, t1, t2, t3)
        }
      }
    }
  }
}

// Uncurry4 takes a cascade of 4 functions each taking only one parameter and returns a function with 4 parameters .
// The inverse function is [Curry4]
func Uncurry4[T0, T1, T2, T3, T4 any](f func(T0) func(T1) func(T2) func(T3) T4) func(T0, T1, T2, T3) T4 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3) T4 {
    return f(t0)(t1)(t2)(t3)
  }
}

// Pipe5 takes an initial value t0 and sucessively applies 5 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe5[T0, T1, T2, T3, T4, T5 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5) T5 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  return t5
}

// Flow5 creates a function that takes an initial value t0 and sucessively applies 5 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow5[T0, T1, T2, T3, T4, T5 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5) func(T0) T5 {
  return func(t0 T0) T5 {
    return Pipe5(t0, f1, f2, f3, f4, f5)
  }
}

// Nullary5 creates a parameter less function from a parameter less function and 4 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary5[T1, T2, T3, T4, T5 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5) func() T5 {
  return func() T5 {
    return Pipe4(f1(), f2, f3, f4, f5)
  }
}

// Curry5 takes a function with 5 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry5]
func Curry5[T0, T1, T2, T3, T4, T5 any](f func(T0, T1, T2, T3, T4) T5) func(T0) func(T1) func(T2) func(T3) func(T4) T5 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) T5 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) T5 {
      return func(t2 T2) func(t3 T3) func(t4 T4) T5 {
        return func(t3 T3) func(t4 T4) T5 {
          return func(t4 T4) T5 {
            return f(t0, t1, t2, t3, t4)
          }
        }
      }
    }
  }
}

// Uncurry5 takes a cascade of 5 functions each taking only one parameter and returns a function with 5 parameters .
// The inverse function is [Curry5]
func Uncurry5[T0, T1, T2, T3, T4, T5 any](f func(T0) func(T1) func(T2) func(T3) func(T4) T5) func(T0, T1, T2, T3, T4) T5 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4) T5 {
    return f(t0)(t1)(t2)(t3)(t4)
  }
}

// Pipe6 takes an initial value t0 and sucessively applies 6 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe6[T0, T1, T2, T3, T4, T5, T6 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6) T6 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  return t6
}

// Flow6 creates a function that takes an initial value t0 and sucessively applies 6 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow6[T0, T1, T2, T3, T4, T5, T6 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6) func(T0) T6 {
  return func(t0 T0) T6 {
    return Pipe6(t0, f1, f2, f3, f4, f5, f6)
  }
}

// Nullary6 creates a parameter less function from a parameter less function and 5 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary6[T1, T2, T3, T4, T5, T6 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6) func() T6 {
  return func() T6 {
    return Pipe5(f1(), f2, f3, f4, f5, f6)
  }
}

// Curry6 takes a function with 6 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry6]
func Curry6[T0, T1, T2, T3, T4, T5, T6 any](f func(T0, T1, T2, T3, T4, T5) T6) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) T6 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) T6 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) T6 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) T6 {
        return func(t3 T3) func(t4 T4) func(t5 T5) T6 {
          return func(t4 T4) func(t5 T5) T6 {
            return func(t5 T5) T6 {
              return f(t0, t1, t2, t3, t4, t5)
            }
          }
        }
      }
    }
  }
}

// Uncurry6 takes a cascade of 6 functions each taking only one parameter and returns a function with 6 parameters .
// The inverse function is [Curry6]
func Uncurry6[T0, T1, T2, T3, T4, T5, T6 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) T6) func(T0, T1, T2, T3, T4, T5) T6 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) T6 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)
  }
}

// Pipe7 takes an initial value t0 and sucessively applies 7 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe7[T0, T1, T2, T3, T4, T5, T6, T7 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7) T7 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  return t7
}

// Flow7 creates a function that takes an initial value t0 and sucessively applies 7 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow7[T0, T1, T2, T3, T4, T5, T6, T7 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7) func(T0) T7 {
  return func(t0 T0) T7 {
    return Pipe7(t0, f1, f2, f3, f4, f5, f6, f7)
  }
}

// Nullary7 creates a parameter less function from a parameter less function and 6 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary7[T1, T2, T3, T4, T5, T6, T7 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7) func() T7 {
  return func() T7 {
    return Pipe6(f1(), f2, f3, f4, f5, f6, f7)
  }
}

// Curry7 takes a function with 7 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry7]
func Curry7[T0, T1, T2, T3, T4, T5, T6, T7 any](f func(T0, T1, T2, T3, T4, T5, T6) T7) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) T7 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) T7 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) T7 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) T7 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) T7 {
          return func(t4 T4) func(t5 T5) func(t6 T6) T7 {
            return func(t5 T5) func(t6 T6) T7 {
              return func(t6 T6) T7 {
                return f(t0, t1, t2, t3, t4, t5, t6)
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry7 takes a cascade of 7 functions each taking only one parameter and returns a function with 7 parameters .
// The inverse function is [Curry7]
func Uncurry7[T0, T1, T2, T3, T4, T5, T6, T7 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) T7) func(T0, T1, T2, T3, T4, T5, T6) T7 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) T7 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)
  }
}

// Pipe8 takes an initial value t0 and sucessively applies 8 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe8[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8) T8 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  return t8
}

// Flow8 creates a function that takes an initial value t0 and sucessively applies 8 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow8[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8) func(T0) T8 {
  return func(t0 T0) T8 {
    return Pipe8(t0, f1, f2, f3, f4, f5, f6, f7, f8)
  }
}

// Nullary8 creates a parameter less function from a parameter less function and 7 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary8[T1, T2, T3, T4, T5, T6, T7, T8 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8) func() T8 {
  return func() T8 {
    return Pipe7(f1(), f2, f3, f4, f5, f6, f7, f8)
  }
}

// Curry8 takes a function with 8 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry8]
func Curry8[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](f func(T0, T1, T2, T3, T4, T5, T6, T7) T8) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) T8 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) T8 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) T8 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) T8 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) T8 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) T8 {
            return func(t5 T5) func(t6 T6) func(t7 T7) T8 {
              return func(t6 T6) func(t7 T7) T8 {
                return func(t7 T7) T8 {
                  return f(t0, t1, t2, t3, t4, t5, t6, t7)
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry8 takes a cascade of 8 functions each taking only one parameter and returns a function with 8 parameters .
// The inverse function is [Curry8]
func Uncurry8[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) T8) func(T0, T1, T2, T3, T4, T5, T6, T7) T8 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) T8 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)
  }
}

// Pipe9 takes an initial value t0 and sucessively applies 9 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe9[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9) T9 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  return t9
}

// Flow9 creates a function that takes an initial value t0 and sucessively applies 9 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow9[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9) func(T0) T9 {
  return func(t0 T0) T9 {
    return Pipe9(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9)
  }
}

// Nullary9 creates a parameter less function from a parameter less function and 8 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9) func() T9 {
  return func() T9 {
    return Pipe8(f1(), f2, f3, f4, f5, f6, f7, f8, f9)
  }
}

// Curry9 takes a function with 9 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry9]
func Curry9[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8) T9) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) T9 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) T9 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) T9 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) T9 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) T9 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) T9 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) T9 {
              return func(t6 T6) func(t7 T7) func(t8 T8) T9 {
                return func(t7 T7) func(t8 T8) T9 {
                  return func(t8 T8) T9 {
                    return f(t0, t1, t2, t3, t4, t5, t6, t7, t8)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry9 takes a cascade of 9 functions each taking only one parameter and returns a function with 9 parameters .
// The inverse function is [Curry9]
func Uncurry9[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) T9) func(T0, T1, T2, T3, T4, T5, T6, T7, T8) T9 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) T9 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)
  }
}

// Pipe10 takes an initial value t0 and sucessively applies 10 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10) T10 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  return t10
}

// Flow10 creates a function that takes an initial value t0 and sucessively applies 10 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10) func(T0) T10 {
  return func(t0 T0) T10 {
    return Pipe10(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)
  }
}

// Nullary10 creates a parameter less function from a parameter less function and 9 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10) func() T10 {
  return func() T10 {
    return Pipe9(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10)
  }
}

// Curry10 takes a function with 10 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry10]
func Curry10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) T10) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) T10 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) T10 {
                return func(t7 T7) func(t8 T8) func(t9 T9) T10 {
                  return func(t8 T8) func(t9 T9) T10 {
                    return func(t9 T9) T10 {
                      return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry10 takes a cascade of 10 functions each taking only one parameter and returns a function with 10 parameters .
// The inverse function is [Curry10]
func Uncurry10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) T10) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) T10 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) T10 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)
  }
}

// Pipe11 takes an initial value t0 and sucessively applies 11 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11) T11 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  return t11
}

// Flow11 creates a function that takes an initial value t0 and sucessively applies 11 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11) func(T0) T11 {
  return func(t0 T0) T11 {
    return Pipe11(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11)
  }
}

// Nullary11 creates a parameter less function from a parameter less function and 10 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11) func() T11 {
  return func() T11 {
    return Pipe10(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11)
  }
}

// Curry11 takes a function with 11 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry11]
func Curry11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) T11) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) T11 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) T11 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) T11 {
                    return func(t9 T9) func(t10 T10) T11 {
                      return func(t10 T10) T11 {
                        return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry11 takes a cascade of 11 functions each taking only one parameter and returns a function with 11 parameters .
// The inverse function is [Curry11]
func Uncurry11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) T11) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) T11 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10) T11 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)
  }
}

// Pipe12 takes an initial value t0 and sucessively applies 12 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12) T12 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  return t12
}

// Flow12 creates a function that takes an initial value t0 and sucessively applies 12 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12) func(T0) T12 {
  return func(t0 T0) T12 {
    return Pipe12(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12)
  }
}

// Nullary12 creates a parameter less function from a parameter less function and 11 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12) func() T12 {
  return func() T12 {
    return Pipe11(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12)
  }
}

// Curry12 takes a function with 12 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry12]
func Curry12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) T12) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) T12 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) T12 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) T12 {
                      return func(t10 T10) func(t11 T11) T12 {
                        return func(t11 T11) T12 {
                          return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry12 takes a cascade of 12 functions each taking only one parameter and returns a function with 12 parameters .
// The inverse function is [Curry12]
func Uncurry12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) T12) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) T12 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11) T12 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)
  }
}

// Pipe13 takes an initial value t0 and sucessively applies 13 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13) T13 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  return t13
}

// Flow13 creates a function that takes an initial value t0 and sucessively applies 13 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13) func(T0) T13 {
  return func(t0 T0) T13 {
    return Pipe13(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13)
  }
}

// Nullary13 creates a parameter less function from a parameter less function and 12 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13) func() T13 {
  return func() T13 {
    return Pipe12(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13)
  }
}

// Curry13 takes a function with 13 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry13]
func Curry13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) T13) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) T13 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) T13 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) T13 {
                        return func(t11 T11) func(t12 T12) T13 {
                          return func(t12 T12) T13 {
                            return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12)
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry13 takes a cascade of 13 functions each taking only one parameter and returns a function with 13 parameters .
// The inverse function is [Curry13]
func Uncurry13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) T13) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) T13 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12) T13 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)
  }
}

// Pipe14 takes an initial value t0 and sucessively applies 14 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14) T14 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  return t14
}

// Flow14 creates a function that takes an initial value t0 and sucessively applies 14 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14) func(T0) T14 {
  return func(t0 T0) T14 {
    return Pipe14(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14)
  }
}

// Nullary14 creates a parameter less function from a parameter less function and 13 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14) func() T14 {
  return func() T14 {
    return Pipe13(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14)
  }
}

// Curry14 takes a function with 14 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry14]
func Curry14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) T14) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) T14 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) T14 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) T14 {
                          return func(t12 T12) func(t13 T13) T14 {
                            return func(t13 T13) T14 {
                              return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry14 takes a cascade of 14 functions each taking only one parameter and returns a function with 14 parameters .
// The inverse function is [Curry14]
func Uncurry14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) T14) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) T14 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13) T14 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)
  }
}

// Pipe15 takes an initial value t0 and sucessively applies 15 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15) T15 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  t15 := f15(t14)
  return t15
}

// Flow15 creates a function that takes an initial value t0 and sucessively applies 15 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15) func(T0) T15 {
  return func(t0 T0) T15 {
    return Pipe15(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15)
  }
}

// Nullary15 creates a parameter less function from a parameter less function and 14 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15) func() T15 {
  return func() T15 {
    return Pipe14(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15)
  }
}

// Curry15 takes a function with 15 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry15]
func Curry15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) T15) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) T15 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                          return func(t12 T12) func(t13 T13) func(t14 T14) T15 {
                            return func(t13 T13) func(t14 T14) T15 {
                              return func(t14 T14) T15 {
                                return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14)
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry15 takes a cascade of 15 functions each taking only one parameter and returns a function with 15 parameters .
// The inverse function is [Curry15]
func Uncurry15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) T15) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) T15 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14) T15 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)(t14)
  }
}

// Pipe16 takes an initial value t0 and sucessively applies 16 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16) T16 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  t15 := f15(t14)
  t16 := f16(t15)
  return t16
}

// Flow16 creates a function that takes an initial value t0 and sucessively applies 16 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16) func(T0) T16 {
  return func(t0 T0) T16 {
    return Pipe16(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16)
  }
}

// Nullary16 creates a parameter less function from a parameter less function and 15 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16) func() T16 {
  return func() T16 {
    return Pipe15(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16)
  }
}

// Curry16 takes a function with 16 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry16]
func Curry16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) T16) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) T16 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                          return func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                            return func(t13 T13) func(t14 T14) func(t15 T15) T16 {
                              return func(t14 T14) func(t15 T15) T16 {
                                return func(t15 T15) T16 {
                                  return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15)
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry16 takes a cascade of 16 functions each taking only one parameter and returns a function with 16 parameters .
// The inverse function is [Curry16]
func Uncurry16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) T16) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) T16 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15) T16 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)(t14)(t15)
  }
}

// Pipe17 takes an initial value t0 and sucessively applies 17 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe17[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17) T17 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  t15 := f15(t14)
  t16 := f16(t15)
  t17 := f17(t16)
  return t17
}

// Flow17 creates a function that takes an initial value t0 and sucessively applies 17 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow17[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17) func(T0) T17 {
  return func(t0 T0) T17 {
    return Pipe17(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17)
  }
}

// Nullary17 creates a parameter less function from a parameter less function and 16 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17) func() T17 {
  return func() T17 {
    return Pipe16(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17)
  }
}

// Curry17 takes a function with 17 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry17]
func Curry17[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) T17) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) T17 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                          return func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                            return func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                              return func(t14 T14) func(t15 T15) func(t16 T16) T17 {
                                return func(t15 T15) func(t16 T16) T17 {
                                  return func(t16 T16) T17 {
                                    return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16)
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry17 takes a cascade of 17 functions each taking only one parameter and returns a function with 17 parameters .
// The inverse function is [Curry17]
func Uncurry17[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) T17) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) T17 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15, t16 T16) T17 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)(t14)(t15)(t16)
  }
}

// Pipe18 takes an initial value t0 and sucessively applies 18 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe18[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18) T18 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  t15 := f15(t14)
  t16 := f16(t15)
  t17 := f17(t16)
  t18 := f18(t17)
  return t18
}

// Flow18 creates a function that takes an initial value t0 and sucessively applies 18 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow18[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18) func(T0) T18 {
  return func(t0 T0) T18 {
    return Pipe18(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18)
  }
}

// Nullary18 creates a parameter less function from a parameter less function and 17 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18) func() T18 {
  return func() T18 {
    return Pipe17(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18)
  }
}

// Curry18 takes a function with 18 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry18]
func Curry18[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) T18) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) func(T17) T18 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                          return func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                            return func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                              return func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                                return func(t15 T15) func(t16 T16) func(t17 T17) T18 {
                                  return func(t16 T16) func(t17 T17) T18 {
                                    return func(t17 T17) T18 {
                                      return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17)
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry18 takes a cascade of 18 functions each taking only one parameter and returns a function with 18 parameters .
// The inverse function is [Curry18]
func Uncurry18[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) func(T17) T18) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) T18 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15, t16 T16, t17 T17) T18 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)(t14)(t15)(t16)(t17)
  }
}

// Pipe19 takes an initial value t0 and sucessively applies 19 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe19[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18, f19 func(T18) T19) T19 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  t15 := f15(t14)
  t16 := f16(t15)
  t17 := f17(t16)
  t18 := f18(t17)
  t19 := f19(t18)
  return t19
}

// Flow19 creates a function that takes an initial value t0 and sucessively applies 19 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow19[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18, f19 func(T18) T19) func(T0) T19 {
  return func(t0 T0) T19 {
    return Pipe19(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19)
  }
}

// Nullary19 creates a parameter less function from a parameter less function and 18 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18, f19 func(T18) T19) func() T19 {
  return func() T19 {
    return Pipe18(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19)
  }
}

// Curry19 takes a function with 19 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry19]
func Curry19[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) T19) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) func(T17) func(T18) T19 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                          return func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                            return func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                              return func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                                return func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                                  return func(t16 T16) func(t17 T17) func(t18 T18) T19 {
                                    return func(t17 T17) func(t18 T18) T19 {
                                      return func(t18 T18) T19 {
                                        return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18)
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry19 takes a cascade of 19 functions each taking only one parameter and returns a function with 19 parameters .
// The inverse function is [Curry19]
func Uncurry19[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) func(T17) func(T18) T19) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) T19 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15, t16 T16, t17 T17, t18 T18) T19 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)(t14)(t15)(t16)(t17)(t18)
  }
}

// Pipe20 takes an initial value t0 and sucessively applies 20 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Pipe20[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20 any](t0 T0, f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18, f19 func(T18) T19, f20 func(T19) T20) T20 {
  t1 := f1(t0)
  t2 := f2(t1)
  t3 := f3(t2)
  t4 := f4(t3)
  t5 := f5(t4)
  t6 := f6(t5)
  t7 := f7(t6)
  t8 := f8(t7)
  t9 := f9(t8)
  t10 := f10(t9)
  t11 := f11(t10)
  t12 := f12(t11)
  t13 := f13(t12)
  t14 := f14(t13)
  t15 := f15(t14)
  t16 := f16(t15)
  t17 := f17(t16)
  t18 := f18(t17)
  t19 := f19(t18)
  t20 := f20(t19)
  return t20
}

// Flow20 creates a function that takes an initial value t0 and sucessively applies 20 functions where the input of a function is the return value of the previous function
// The final return value is the result of the last function application
func Flow20[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20 any](f1 func(T0) T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18, f19 func(T18) T19, f20 func(T19) T20) func(T0) T20 {
  return func(t0 T0) T20 {
    return Pipe20(t0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20)
  }
}

// Nullary20 creates a parameter less function from a parameter less function and 19 functions. When executed the first parameter less function gets executed and then the result is piped through the remaining functions
func Nullary20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20 any](f1 func() T1, f2 func(T1) T2, f3 func(T2) T3, f4 func(T3) T4, f5 func(T4) T5, f6 func(T5) T6, f7 func(T6) T7, f8 func(T7) T8, f9 func(T8) T9, f10 func(T9) T10, f11 func(T10) T11, f12 func(T11) T12, f13 func(T12) T13, f14 func(T13) T14, f15 func(T14) T15, f16 func(T15) T16, f17 func(T16) T17, f18 func(T17) T18, f19 func(T18) T19, f20 func(T19) T20) func() T20 {
  return func() T20 {
    return Pipe19(f1(), f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20)
  }
}

// Curry20 takes a function with 20 parameters and returns a cascade of functions each taking only one parameter.
// The inverse function is [Uncurry20]
func Curry20[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20 any](f func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) T20) func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) func(T17) func(T18) func(T19) T20 {
  return func(t0 T0) func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
    return func(t1 T1) func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
      return func(t2 T2) func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
        return func(t3 T3) func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
          return func(t4 T4) func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
            return func(t5 T5) func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
              return func(t6 T6) func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                return func(t7 T7) func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                  return func(t8 T8) func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                    return func(t9 T9) func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                      return func(t10 T10) func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                        return func(t11 T11) func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                          return func(t12 T12) func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                            return func(t13 T13) func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                              return func(t14 T14) func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                                return func(t15 T15) func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                                  return func(t16 T16) func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                                    return func(t17 T17) func(t18 T18) func(t19 T19) T20 {
                                      return func(t18 T18) func(t19 T19) T20 {
                                        return func(t19 T19) T20 {
                                          return f(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19)
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Uncurry20 takes a cascade of 20 functions each taking only one parameter and returns a function with 20 parameters .
// The inverse function is [Curry20]
func Uncurry20[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20 any](f func(T0) func(T1) func(T2) func(T3) func(T4) func(T5) func(T6) func(T7) func(T8) func(T9) func(T10) func(T11) func(T12) func(T13) func(T14) func(T15) func(T16) func(T17) func(T18) func(T19) T20) func(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) T20 {
  return func(t0 T0, t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15, t16 T16, t17 T17, t18 T18, t19 T19) T20 {
    return f(t0)(t1)(t2)(t3)(t4)(t5)(t6)(t7)(t8)(t9)(t10)(t11)(t12)(t13)(t14)(t15)(t16)(t17)(t18)(t19)
  }
}
