//go:build disabled

package option

// Option will be of type T or None
type Option[T any] interface {
	fmt.Stringer
}

type none struct {
}

var const_none = none{}

func (none) String() string {
	return "None"
}

type some[T any] struct {
	v T
}

func (s some[T]) String() string {
	return fmt.Sprintf("Some[%v]", s.v)
}

func IsNone[T any](val Option[T]) bool {
	return val == const_none
}

func Some[T any](value T) Option[T] {
	return some[T]{v: value}
}

func Of[T any](value T) Option[T] {
	return Some(value)
}

func None[T any]() Option[T] {
	return const_none
}

func IsSome[T any](val Option[T]) bool {
	return !IsNone(val)
}

func MonadFold[A, B any](ma Option[A], onNone func() B, onSome func(A) B) B {
	if IsNone(ma) {
		return onNone()
	}
	return onSome(ma.(some[A]).v)
}

func Unwrap[A any](a A) func(Option[A]) (A, bool) {
	return func(ma Option[A]) (A, bool) {
		if IsNone(ma) {
			return a, false
		}
		return ma.(some[A]).v, true
	}
}
